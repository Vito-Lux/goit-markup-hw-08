// Flex

@mixin spacedFlex($type: space-between) {
   display: flex;
   justify-content: $type;
   align-items: center;
}

@mixin centeredFlex($type: center) {
   display: flex;
   justify-content: $type;
   align-items: center;
}

@mixin reverseFlex($type: row-reverse) {
   display: flex;
   flex-direction: $type;
   align-items: center;
}

@mixin verticalFlexCenter {
   display: flex;
   justify-content: center;
}

@mixin columnFlexDirection {
   display: flex;
   flex-direction: column;
}

@mixin alignFlexCenter {
   display: flex;
   align-items: center;
}

// Transitions

@mixin transitionRules($attribute...) {
   transition-duration: $transition-duration;
   transition-property: $attribute;
   transition-timing-function: $transition-timing-function;
}

// Flexbox-gap

@mixin listFlexGap {
   display: flex;
   flex-wrap: wrap;
   margin-top: calc(-1 * #{$flexbox-gap});
   margin-left: calc(-1 * #{$flexbox-gap});
}

@mixin itemFlexGap($number) {
   margin-top: $flexbox-gap;
   margin-left: $flexbox-gap;
   flex-basis: calc((100% - #{$number} * #{$flexbox-gap}) / #{$number});
}

// Decimals

@function decimal-round($number, $digits: 0, $mode: round) {
   $n: 1;

   @if type-of($number) != number {
      @warn '#{ $number } is not a number.';
      @return $number;
   }

   @if type-of($digits) != number {
      @warn '#{ $digits } is not a number.';
      @return $number;
   } @else if not unitless($digits) {
      @warn '#{ $digits } has a unit.';
      @return $number;
   }

   @for $i from 1 through $digits {
      $n: $n * 10;
   }

   @if $mode == round {
      @return round($number * $n) / $n;
   } @else if $mode == ceil {
      @return ceil($number * $n) / $n;
   } @else if $mode == floor {
      @return floor($number * $n) / $n;
   } @else {
      @warn '#{ $mode } is undefined keyword.';
      @return $number;
   }
}

@function decimal-ceil($number, $digits: 0) {
   @return decimal-round($number, $digits, ceil);
}

@function decimal-floor($number, $digits: 0) {
   @return decimal-round($number, $digits, floor);
}

// Fs-lh-fw-ls

@mixin fontLineWeightLetter($font-size, $line-height, $font-weight, $letter-spacing) {
   font-size: #{$font-size * 1px};

   @if ($line-height == "base") {
      line-height: $base-line-height;
   } @else if ($line-height == "sec") {
      line-height: $secondary-line-height;
   } @else if ($line-height == "add") {
      line-height: $additional-line-height;
   } @else if ($line-height != "vert") {
      line-height: decimal-round(($line-height / $font-size), 2);
   }

   @if ($font-weight == "thin") {
      font-weight: $thin-font-weight;
   } @else if ($font-weight == "light") {
      font-weight: $light-font-weight;
   } @else if ($font-weight == "norm") {
      font-weight: $regular-font-weight;
   } @else if ($font-weight == "med") {
      font-weight: $medium-font-weight;
   } @else if ($font-weight == "bold") {
      font-weight: $bold-font-weight;
   } @else if ($font-weight == "eb") {
      font-weight: $black-font-weight;
   }

   @if ($letter-spacing == "base") {
      letter-spacing: $base-letter-spacing;
   } @else if ($letter-spacing == "dbl") {
      letter-spacing: #{$base-letter-spacing * 2};
   } @else if ($letter-spacing == "div") {
      letter-spacing: #{$base-letter-spacing / 3};
   } @else if ($letter-spacing == "vert") {
      letter-spacing: decimal-round($pixel-letter-spacing / $font-size) * 1em;
   }
}

// Container

@mixin containerWidth($layoutWidth) {
   @if ($layoutWidth == "work") {
      max-width: $fullLayoutWidth - $sidePadding;
   } @else if ($layoutWidth == "full") {
      max-width: $fullLayoutWidth;
   }

   margin-left: auto;
   margin-right: auto;
   padding-left: 15px;
   padding-right: 15px;
}

// Media

@mixin forSize($range) {
   $mobile: 480px;
   $tablet: 768px;
   $desktop: 1200px;

   @if $range == "maxmob" {
      @media screen and (max-width: #{$mobile - 0.02px}) {
         @content;
      }
   } @else if ($range == "minmob") {
      @media screen and (min-width: $mobile) {
         @content;
      }
   } @else if ($range == "maxtab") {
      @media screen and (max-width: #{$tablet - 0.02px}) {
         @content;
      }
   } @else if ($range == "mintab") {
      @media screen and (min-width: $tablet) {
         @content;
      }
   } @else if ($range == "maxpc") {
      @media screen and (max-width: #{$desktop - 0.02px}) {
         @content;
      }
   } @else if ($range == "minpc") {
      @media screen and (min-width: $desktop) {
         @content;
      }
   }
}
